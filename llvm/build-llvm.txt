http://llvm.org/docs/GettingStarted.html
http://clang.llvm.org/get_started.html
http://lldb.llvm.org/build.html

llvm
	git clone --config core.autocrlf=false https://github.com/llvm/llvm-project.git
	svn co http://llvm.org/svn/llvm-project/dragonegg/trunk dragonegg

CMakeLists.txt or  CMakeCache.txt
	add_definitions(-D__STDC_FORMAT_MACROS)
	add_definitions(-D__USE_MINGW_ANSI_STDIO)

	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -static-libgcc -static-libstdc++")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++")

	set source-charset and execution-charset to UTF-8:
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /utf-8")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /utf-8")

manually edit  CMakeCache.txt, update compiler/linker flags after run cmake.

Fix compiler-rt\lib\sanitizer_common\sanitizer_win.cc(42): error C3437: #pragma execution_character_set is not supported when /source-charset, /execution-charset, or /utf-8 has been specified
open Windows Kits\10\Include\10.0.17763.0\shared\TraceLoggingProvider.h
change the code block, disable _TlgPragmaUtf8Begin and _TlgPragmaUtf8End

	#if defined(_MSC_VER) && (_MSC_VER != 1700)
	#define _TlgPragmaUtf8Begin __pragma(execution_character_set(push, "UTF-8"))
	#define _TlgPragmaUtf8End   __pragma(execution_character_set(pop))
	#else
	#define _TlgPragmaUtf8Begin
	#define _TlgPragmaUtf8End
	#endif

llvm/tools/lldb/cmake/modules/LLDBConfig.cmake
	function(find_python_libs_windows)

pyconfig.h
	#define hypot _hypot

MinGW
	gendef python27.dll
	dlltool --dllname python27.dll --def python27.def --output-lib libpython27.a
	ranlib libpython27.a

	gendef python36.dll
	dlltool --dllname python36.dll --def python36.def --output-lib libpython36.a
	ranlib libpython36.a

	gendef python37.dll
	dlltool --dllname python37.dll --def python37.def --output-lib libpython37.a
	ranlib libpython37.a

	gendef python38.dll
	dlltool --dllname python38.dll --def python38.def --output-lib libpython38.a
	ranlib libpython38.a

	gendef python39.dll
	dlltool --dllname python39.dll --def python39.def --output-lib libpython39.a
	ranlib libpython39.a


two-stage build based on llvm\utils\release\build_llvm_package.bat

1. build with LLVM
mkdir build-first
set PATH=F:/Dev/LLVM11/bin;%PATH%
set CC=F:/Dev/LLVM11/bin/clang-cl.exe
set CXX=F:/Dev/LLVM11/bin/clang-cl.exe

cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release ^
	-DLLVM_ENABLE_ASSERTIONS=ON ^
	-DLLVM_INSTALL_TOOLCHAIN_ONLY=ON ^
	-DLLVM_ENABLE_PROJECTS="clang;compiler-rt;lld;openmp" ^
	-DLLVM_TARGETS_TO_BUILD="AArch64;X86" ^
	../llvm/llvm

ninja all
ninja clang
ninja compiler-rt

2. rebuild using clang-cl
mkdir build
set PATH=../build-first/bin;%PATH%
set CC=../build-first/bin/clang-cl.exe
set CXX=../build-first/bin/clang-cl.exe

cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release ^
	-DLLVM_ENABLE_ASSERTIONS=ON ^
	-DLLVM_INSTALL_TOOLCHAIN_ONLY=ON ^
	-DLLVM_BUILD_LLVM_C_DYLIB=ON ^
	-DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt;lld;lldb;openmp" ^
	-DLLVM_TARGETS_TO_BUILD="AArch64;X86" ^
	-DPYTHON_HOME=D:/Dev/Python3 ^
	-DCMAKE_INSTALL_PREFIX=F:/Dev/LLVM-Main ^
	../llvm/llvm

without lldb:
cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release ^
	-DLLVM_ENABLE_ASSERTIONS=ON ^
	-DLLVM_INSTALL_TOOLCHAIN_ONLY=ON ^
	-DLLVM_BUILD_LLVM_C_DYLIB=ON ^
	-DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt;lld;openmp" ^
	-DLLVM_TARGETS_TO_BUILD="AArch64;X86" ^
	-DCMAKE_INSTALL_PREFIX=F:/Dev/LLVM-Main ^
	../llvm/llvm

ninja all
ninja clang
ninja compiler-rt

3. others
cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release ^
	-DLLVM_ENABLE_ASSERTIONS=ON ^
	-DLLVM_INSTALL_TOOLCHAIN_ONLY=ON ^
	-DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt" ^
	-DLLVM_TARGETS_TO_BUILD="X86" ^
	../llvm/llvm

ninja clang-tidy
ninja clang-format

cmake -G "Ninja" -DCMAKE_BUILD_TYPE=RelWithDebInfo ^
cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ^

Z3 for Clang Static Analyzer
https://github.com/Z3Prover/z3/releases

-DZ3_LIBRARIES=../z3/bin/libz3.lib -DZ3_INCLUDE_DIR=../z3/include
